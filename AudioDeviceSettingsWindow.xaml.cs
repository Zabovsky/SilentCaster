using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using SilentCaster.Services;
using NAudio.Wave;

namespace SilentCaster
{
    public partial class AudioDeviceSettingsWindow : Window
    {
        private readonly AudioDeviceService _audioDeviceService;
        private readonly ObservableCollection<AudioDeviceViewModel> _devices;
        private AudioDeviceViewModel? _selectedDevice;
        private AudioDeviceService.AudioDeviceConfig _originalConfig;

        public AudioDeviceSettingsWindow(AudioDeviceService audioDeviceService)
        {
            try
            {
                InitializeComponent();
                _audioDeviceService = audioDeviceService ?? throw new ArgumentNullException(nameof(audioDeviceService));
                _devices = new ObservableCollection<AudioDeviceViewModel>();
                _originalConfig = _audioDeviceService.GetConfig();
                
                if (AudioDevicesListBox != null)
                {
                    AudioDevicesListBox.ItemsSource = _devices;
                }
                
                LoadDevices();
                UpdateDeviceInfo();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error in AudioDeviceSettingsWindow constructor: {ex.Message}");
                MessageBox.Show($"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                throw;
            }
        }

        private void LoadDevices()
        {
            try
            {
                if (_audioDeviceService == null)
                {
                    System.Diagnostics.Debug.WriteLine("AudioDeviceService is null in LoadDevices");
                    return;
                }
                
                if (_devices == null)
                {
                    System.Diagnostics.Debug.WriteLine("_devices collection is null in LoadDevices");
                    return;
                }
                
                _devices.Clear();
                var devices = _audioDeviceService.GetAvailableDevices();
                var selectedDevice = _audioDeviceService.GetSelectedDevice();

                foreach (var device in devices)
                {
                    var isSelected = selectedDevice?.DeviceId == device.DeviceId;
                    var isAvailable = _audioDeviceService.TestDevice(device.DeviceId);
                    
                    _devices.Add(new AudioDeviceViewModel
                    {
                        DeviceId = device.DeviceId,
                        Name = device.Name,
                        DeviceInfo = $"–ö–∞–Ω–∞–ª—ã: {device.Channels}, –ß–∞—Å—Ç–æ—Ç–∞: {device.SampleRate} Hz",
                        IsSelected = isSelected,
                        Status = isAvailable ? "–î–æ—Å—Ç—É–ø–Ω–æ" : "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                        StatusColor = isAvailable ? Brushes.LightGreen : Brushes.Red,
                        Channels = device.Channels,
                        SampleRate = device.SampleRate
                    });
                }

                // –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                var currentDevice = _devices.FirstOrDefault(d => d.IsSelected);
                if (currentDevice != null && AudioDevicesListBox != null)
                {
                    try
                    {
                        AudioDevicesListBox.SelectedItem = currentDevice;
                    }
                    catch (Exception ex)
                    {
                        System.Diagnostics.Debug.WriteLine($"Error setting selected item: {ex.Message}");
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error in LoadDevices: {ex.Message}");
            }
        }

        private void UpdateDeviceInfo()
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
                if (DeviceNameTextBlock == null || DeviceIdTextBlock == null || 
                    DeviceChannelsTextBlock == null || DeviceSampleRateTextBlock == null || 
                    UseCustomDeviceCheckBox == null)
                {
                    System.Diagnostics.Debug.WriteLine("Some UI elements are not initialized in UpdateDeviceInfo");
                    return;
                }
                
                if (_selectedDevice != null)
                {
                    DeviceNameTextBlock.Text = _selectedDevice.Name;
                    DeviceIdTextBlock.Text = _selectedDevice.DeviceId;
                    DeviceChannelsTextBlock.Text = _selectedDevice.Channels.ToString();
                    DeviceSampleRateTextBlock.Text = $"{_selectedDevice.SampleRate} Hz";
                    UseCustomDeviceCheckBox.IsChecked = _selectedDevice.DeviceId != "default";
                }
                else
                {
                    DeviceNameTextBlock.Text = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ";
                    DeviceIdTextBlock.Text = "-";
                    DeviceChannelsTextBlock.Text = "-";
                    DeviceSampleRateTextBlock.Text = "-";
                    UseCustomDeviceCheckBox.IsChecked = false;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error in UpdateDeviceInfo: {ex.Message}");
            }
        }

        private void AudioDevicesListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (AudioDevicesListBox?.SelectedItem is AudioDeviceViewModel selectedDevice)
                {
                    if (_devices == null)
                    {
                        System.Diagnostics.Debug.WriteLine("_devices collection is null in AudioDevicesListBox_SelectionChanged");
                        return;
                    }
                    
                    // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    foreach (var device in _devices)
                    {
                        device.IsSelected = false;
                    }
                    
                    // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                    selectedDevice.IsSelected = true;
                    _selectedDevice = selectedDevice;
                    
                    UpdateDeviceInfo();
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error in AudioDevicesListBox_SelectionChanged: {ex.Message}");
            }
        }

        private void RefreshDevicesButton_Click(object sender, RoutedEventArgs e)
        {
            LoadDevices();
            UpdateDeviceInfo();
        }

        private void TestDeviceButton_Click(object sender, RoutedEventArgs e)
        {
            if (_selectedDevice == null)
            {
                MessageBox.Show("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            var isAvailable = _audioDeviceService.TestDevice(_selectedDevice.DeviceId);
            var message = isAvailable ? "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!" : "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.";
            var icon = isAvailable ? MessageBoxImage.Information : MessageBoxImage.Warning;
            
            MessageBox.Show(message, "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", MessageBoxButton.OK, icon);
        }

        private async void TestSoundButton_Click(object sender, RoutedEventArgs e)
        {
            if (_selectedDevice == null)
            {
                MessageBox.Show("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–≤—É–∫–∞", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            try
            {
                // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                if (sender is Button button)
                {
                    button.IsEnabled = false;
                    button.Content = "üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...";
                }
                
                await PlayTestSoundAsync();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–≤—É–∫–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                if (sender is Button button)
                {
                    button.IsEnabled = true;
                    button.Content = "üéµ –¢–µ—Å—Ç –∑–≤—É–∫–∞";
                }
            }
        }

        private async Task PlayTestSoundAsync()
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å UI —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            double volume = 0.5;

            await Task.Run(async () =>
            {
                try
                {
                    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫ (—Å–∏–Ω—É—Å–æ–∏–¥–∞ 440 Hz)
                    var sampleRate = 44100;
                    var duration = 1.0; // 1 —Å–µ–∫—É–Ω–¥–∞
                    var frequency = 440.0; // 440 Hz (–Ω–æ—Ç–∞ A)
                    var amplitude = 0.3;

                    var samples = (int)(sampleRate * duration);
                    var waveBuffer = new byte[samples * 2]; // 16-bit audio

                    for (int i = 0; i < samples; i++)
                    {
                        var sample = (short)(Math.Sin(2 * Math.PI * frequency * i / sampleRate) * amplitude * volume * short.MaxValue);
                        var bytes = BitConverter.GetBytes(sample);
                        waveBuffer[i * 2] = bytes[0];
                        waveBuffer[i * 2 + 1] = bytes[1];
                    }

                    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
                    using var waveStream = new RawSourceWaveStream(waveBuffer, 0, waveBuffer.Length, new WaveFormat(sampleRate, 16, 1));
                    
                    if (_selectedDevice?.DeviceId == "default")
                    {
                        using var waveOut = new WaveOut();
                        waveOut.Init(waveStream);
                        waveOut.Play();
                        
                        // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                        while (waveOut.PlaybackState == PlaybackState.Playing)
                        {
                            await Task.Delay(50); // –ò—Å–ø–æ–ª—å–∑—É–µ–º await –≤–º–µ—Å—Ç–æ Wait()
                        }
                    }
                    else
                    {
                        // –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                        var deviceId = int.Parse(_selectedDevice!.DeviceId);
                        using var waveOut = new WaveOut { DeviceNumber = deviceId };
                        waveOut.Init(waveStream);
                        waveOut.Play();
                        
                        // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                        while (waveOut.PlaybackState == PlaybackState.Playing)
                        {
                            await Task.Delay(50); // –ò—Å–ø–æ–ª—å–∑—É–µ–º await –≤–º–µ—Å—Ç–æ Wait()
                        }
                    }
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine($"Error in PlayTestSoundAsync: {ex.Message}");
                    throw;
                }
            });
        }

        private void TestVolumeSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            try
            {
                if (TestVolumeTextBlock != null)
                {
                    TestVolumeTextBlock.Text = $"{(int)e.NewValue}%";
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error in TestVolumeSlider_ValueChanged: {ex.Message}");
            }
        }

        private void ApplyButton_Click(object sender, RoutedEventArgs e)
        {
            if (_selectedDevice != null)
            {
                _audioDeviceService.SetSelectedDevice(_selectedDevice.DeviceId);
                MessageBox.Show($"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{_selectedDevice.Name}' –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!", "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }

        private void SaveButton_Click(object sender, RoutedEventArgs e)
        {
            if (_selectedDevice != null)
            {
                _audioDeviceService.SetSelectedDevice(_selectedDevice.DeviceId);
            }
            
            MessageBox.Show("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
            DialogResult = true;
            Close();
        }

        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            _audioDeviceService.UpdateConfig(_originalConfig);
            DialogResult = false;
            Close();
        }

        private void TitleBar_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            DragMove();
        }

        private void MinimizeButton_Click(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }

        private void MaximizeButton_Click(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState == WindowState.Maximized ? WindowState.Normal : WindowState.Maximized;
        }

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        public class AudioDeviceViewModel
        {
            public string DeviceId { get; set; } = string.Empty;
            public string Name { get; set; } = string.Empty;
            public string DeviceInfo { get; set; } = string.Empty;
            public bool IsSelected { get; set; }
            public string Status { get; set; } = string.Empty;
            public Brush StatusColor { get; set; } = Brushes.Gray;
            public int Channels { get; set; }
            public int SampleRate { get; set; }
        }
    }
} 