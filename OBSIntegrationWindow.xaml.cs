using System;
using System.IO;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using Newtonsoft.Json;
using SilentCaster.Services;

namespace SilentCaster
{
    public partial class OBSIntegrationWindow : Window
    {
        private readonly OBSService _obsService;
        private readonly SubtitlesService _subtitlesService;
        private OBSIntegrationSettings _settings;

        public OBSIntegrationWindow(OBSService obsService, SubtitlesService subtitlesService)
        {
            InitializeComponent();
            _obsService = obsService;
            _subtitlesService = subtitlesService;
            
            LoadSettings();
            SetupEventHandlers();
            UpdateUI();
            _obsService.VersionDetected += OnOBSVersionDetected;
        }

        private void LoadSettings()
        {
            try
            {
                if (File.Exists("obs_integration_settings.json"))
                {
                    var json = File.ReadAllText("obs_integration_settings.json");
                    _settings = JsonConvert.DeserializeObject<OBSIntegrationSettings>(json) ?? new OBSIntegrationSettings();
                }
                else
                {
                    _settings = new OBSIntegrationSettings();
                }
            }
            catch
            {
                _settings = new OBSIntegrationSettings();
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ UI
            OBSEnabledCheckBox.IsChecked = _settings.OBSEnabled;
            OBSUrlTextBox.Text = _settings.OBSUrl;
            OBSPasswordBox.Password = _settings.OBSPassword;
            
            SubtitlesEnabledCheckBox.IsChecked = _settings.SubtitlesEnabled;
            SubtitleSourceTextBox.Text = _settings.SubtitleSourceName;
            SubtitleDurationSlider.Value = _settings.SubtitleDuration / 1000.0; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
            SubtitleLengthSlider.Value = _settings.MaxSubtitleLength;
            
            ChatSubtitlesCheckBox.IsChecked = _settings.ChatSubtitlesEnabled;
            EmotionalSubtitlesCheckBox.IsChecked = _settings.EmotionalSubtitlesEnabled;
            EventSubtitlesCheckBox.IsChecked = _settings.EventSubtitlesEnabled;
            QuickResponseSubtitlesCheckBox.IsChecked = _settings.QuickResponseSubtitlesEnabled;
        }

        private void SetupEventHandlers()
        {
            // OBS Service —Å–æ–±—ã—Ç–∏—è
            _obsService.ConnectionStatusChanged += OnOBSConnectionStatusChanged;
            _obsService.ErrorOccurred += OnOBSErrorOccurred;

            // Subtitles Service —Å–æ–±—ã—Ç–∏—è
            _subtitlesService.SubtitleChanged += OnSubtitleChanged;
            _subtitlesService.SubtitleCleared += OnSubtitleCleared;

            // UI —Å–æ–±—ã—Ç–∏—è
            SubtitleDurationSlider.ValueChanged += (s, e) => 
            {
                SubtitleDurationText.Text = $"{(int)e.NewValue} —Å–µ–∫—É–Ω–¥";
            };

            SubtitleLengthSlider.ValueChanged += (s, e) => 
            {
                SubtitleLengthText.Text = $"{(int)e.NewValue} —Å–∏–º–≤–æ–ª–æ–≤";
            };

            OBSEnabledCheckBox.Checked += (s, e) => UpdateOBSEnabled();
            OBSEnabledCheckBox.Unchecked += (s, e) => UpdateOBSEnabled();
            
            SubtitlesEnabledCheckBox.Checked += (s, e) => UpdateSubtitlesEnabled();
            SubtitlesEnabledCheckBox.Unchecked += (s, e) => UpdateSubtitlesEnabled();
        }

        private void UpdateOBSEnabled()
        {
            _obsService.IsEnabled = OBSEnabledCheckBox.IsChecked == true;
            UpdateUI();
        }

        private void UpdateSubtitlesEnabled()
        {
            _subtitlesService.IsEnabled = SubtitlesEnabledCheckBox.IsChecked == true;
            UpdateUI();
        }

        private void UpdateUI()
        {
            var obsEnabled = OBSEnabledCheckBox.IsChecked == true;
            var subtitlesEnabled = SubtitlesEnabledCheckBox.IsChecked == true;

            // OBS —ç–ª–µ–º–µ–Ω—Ç—ã
            OBSUrlTextBox.IsEnabled = true; // –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ
            OBSPasswordBox.IsEnabled = true; // –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ
            ConnectOBSButton.IsEnabled = obsEnabled && !_obsService.IsConnected;
            DisconnectOBSButton.IsEnabled = obsEnabled && _obsService.IsConnected;
            TestOBSButton.IsEnabled = obsEnabled && _obsService.IsConnected;

            // –°—É–±—Ç–∏—Ç—Ä—ã —ç–ª–µ–º–µ–Ω—Ç—ã
            SubtitleSourceTextBox.IsEnabled = subtitlesEnabled;
            SubtitleDurationSlider.IsEnabled = subtitlesEnabled;
            SubtitleLengthSlider.IsEnabled = subtitlesEnabled;
            TestSubtitleButton.IsEnabled = subtitlesEnabled;
            ClearSubtitleButton.IsEnabled = subtitlesEnabled;
            
            ChatSubtitlesCheckBox.IsEnabled = subtitlesEnabled;
            EmotionalSubtitlesCheckBox.IsEnabled = subtitlesEnabled;
            EventSubtitlesCheckBox.IsEnabled = subtitlesEnabled;
            QuickResponseSubtitlesCheckBox.IsEnabled = subtitlesEnabled;
        }

        private void OnOBSConnectionStatusChanged(object? sender, string status)
        {
            Dispatcher.Invoke(() =>
            {
                OBSStatusTextBlock.Text = status;
                UpdateUI();
            });
        }

        private void OnOBSErrorOccurred(object? sender, string error)
        {
            Dispatcher.Invoke(() =>
            {
                OBSStatusTextBlock.Text = $"–û—à–∏–±–∫–∞: {error}";
                OBSStatusTextBlock.Foreground = Brushes.Red;
            });
        }

        private void OnSubtitleChanged(object? sender, string subtitle)
        {
            Dispatcher.Invoke(() =>
            {
                CurrentSubtitleText.Text = $"–¢–µ–∫—É—â–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã: {subtitle}";
            });
        }

        private void OnSubtitleCleared(object? sender, EventArgs e)
        {
            Dispatcher.Invoke(() =>
            {
                CurrentSubtitleText.Text = "–¢–µ–∫—É—â–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã: –Ω–µ—Ç";
            });
        }

        private async void ConnectOBSButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                ConnectOBSButton.IsEnabled = false;
                OBSStatusTextBlock.Text = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...";
                OBSStatusTextBlock.Foreground = Brushes.Yellow;

                string url = OBSUrlTextBox.Text.Trim();
                if (!url.StartsWith("ws://") && !url.StartsWith("wss://"))
                    url = "ws://" + url;
                try
                {
                    var uri = new Uri(url); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
                }
                catch (UriFormatException)
                {
                    OBSStatusTextBlock.Text = "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å OBS (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ws://host:port)";
                    OBSStatusTextBlock.Foreground = Brushes.Red;
                    ConnectOBSButton.IsEnabled = true;
                    return;
                }

                var success = await _obsService.ConnectAsync(url, OBSPasswordBox.Password);
                if (success)
                {
                    OBSStatusTextBlock.Text = "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ OBS";
                    OBSStatusTextBlock.Foreground = Brushes.Green;
                }
                else
                {
                    OBSStatusTextBlock.Text = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è";
                    OBSStatusTextBlock.Foreground = Brushes.Red;
                }
            }
            catch (Exception ex)
            {
                OBSStatusTextBlock.Text = $"–û—à–∏–±–∫–∞: {ex.Message}";
                OBSStatusTextBlock.Foreground = Brushes.Red;
            }
            finally
            {
                UpdateUI();
            }
        }

        private async void DisconnectOBSButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                await _obsService.DisconnectAsync();
            }
            catch (Exception ex)
            {
                OBSStatusTextBlock.Text = $"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {ex.Message}";
                OBSStatusTextBlock.Foreground = Brushes.Red;
            }
        }

        private async void TestOBSButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var success = await _obsService.SetTextAsync(SubtitleSourceTextBox.Text, "üß™ –¢–µ—Å—Ç OBS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏");
                if (success)
                {
                    OBSStatusTextBlock.Text = "–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!";
                    OBSStatusTextBlock.Foreground = Brushes.Green;
                }
                else
                {
                    OBSStatusTextBlock.Text = "–¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è";
                    OBSStatusTextBlock.Foreground = Brushes.Red;
                }
            }
            catch (Exception ex)
            {
                OBSStatusTextBlock.Text = $"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {ex.Message}";
                OBSStatusTextBlock.Foreground = Brushes.Red;
            }
        }

        private async void TestSubtitleButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                await _subtitlesService.ShowSubtitleAsync("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤!", "–¢–µ—Å—Ç–µ—Ä");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private async void ClearSubtitleButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                await _subtitlesService.ClearSubtitleAsync();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void SaveSettingsButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                _settings.OBSEnabled = OBSEnabledCheckBox.IsChecked == true;
                _settings.OBSUrl = OBSUrlTextBox.Text;
                _settings.OBSPassword = OBSPasswordBox.Password;
                
                _settings.SubtitlesEnabled = SubtitlesEnabledCheckBox.IsChecked == true;
                _settings.SubtitleSourceName = SubtitleSourceTextBox.Text;
                _settings.SubtitleDuration = (int)(SubtitleDurationSlider.Value * 1000); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                _settings.MaxSubtitleLength = (int)SubtitleLengthSlider.Value;
                
                _settings.ChatSubtitlesEnabled = ChatSubtitlesCheckBox.IsChecked == true;
                _settings.EmotionalSubtitlesEnabled = EmotionalSubtitlesCheckBox.IsChecked == true;
                _settings.EventSubtitlesEnabled = EventSubtitlesCheckBox.IsChecked == true;
                _settings.QuickResponseSubtitlesEnabled = QuickResponseSubtitlesCheckBox.IsChecked == true;

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —Å–µ—Ä–≤–∏—Å–∞–º
                _obsService.IsEnabled = _settings.OBSEnabled;
                _subtitlesService.IsEnabled = _settings.SubtitlesEnabled;
                _subtitlesService.SubtitleSourceName = _settings.SubtitleSourceName;
                _subtitlesService.SubtitleDuration = _settings.SubtitleDuration;
                _subtitlesService.MaxSubtitleLength = _settings.MaxSubtitleLength;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                var json = JsonConvert.SerializeObject(_settings, Formatting.Indented);
                File.WriteAllText("obs_integration_settings.json", json);

                MessageBox.Show("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", "–£—Å–ø–µ—Ö", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TitleBar_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            DragMove();
        }

        private void MinimizeButton_Click(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }

        private void MaximizeButton_Click(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState == WindowState.Maximized ? WindowState.Normal : WindowState.Maximized;
        }

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        protected override void OnClosed(EventArgs e)
        {
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
            _obsService.ConnectionStatusChanged -= OnOBSConnectionStatusChanged;
            _obsService.ErrorOccurred -= OnOBSErrorOccurred;
            _subtitlesService.SubtitleChanged -= OnSubtitleChanged;
            _subtitlesService.SubtitleCleared -= OnSubtitleCleared;
            
            base.OnClosed(e);
        }

        private void OnOBSVersionDetected(object? sender, string version)
        {
            Dispatcher.Invoke(() =>
            {
                OBSStatusTextBlock.Text = $"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ OBS (–≤–µ—Ä—Å–∏—è: {version})";
                OBSStatusTextBlock.Foreground = Brushes.Green;
            });
        }
    }

    public class OBSIntegrationSettings
    {
        public bool OBSEnabled { get; set; } = false;
        public string OBSUrl { get; set; } = "ws://localhost:4444";
        public string OBSPassword { get; set; } = "";
        
        public bool SubtitlesEnabled { get; set; } = false;
        public string SubtitleSourceName { get; set; } = "Subtitles";
        public int SubtitleDuration { get; set; } = 5000; // –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        public int MaxSubtitleLength { get; set; } = 100;
        
        public bool ChatSubtitlesEnabled { get; set; } = true;
        public bool EmotionalSubtitlesEnabled { get; set; } = true;
        public bool EventSubtitlesEnabled { get; set; } = true;
        public bool QuickResponseSubtitlesEnabled { get; set; } = true;
    }
} 