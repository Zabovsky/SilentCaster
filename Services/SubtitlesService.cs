using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Timers;

namespace SilentCaster.Services
{
    public class SubtitlesService
    {
        private readonly OBSService _obsService;
        private readonly Timer _subtitleTimer;
        private string _currentSubtitle = "";
        private string _subtitleSourceName = "Subtitles";
        private bool _isEnabled = false;
        private int _subtitleDuration = 5000; // 5 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        private int _maxSubtitleLength = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤

        public event EventHandler<string>? SubtitleChanged;
        public event EventHandler? SubtitleCleared;

        public bool IsEnabled
        {
            get => _isEnabled;
            set
            {
                _isEnabled = value;
                if (!value)
                {
                    ClearSubtitleAsync();
                }
            }
        }

        public string SubtitleSourceName
        {
            get => _subtitleSourceName;
            set => _subtitleSourceName = value;
        }

        public int SubtitleDuration
        {
            get => _subtitleDuration;
            set => _subtitleDuration = Math.Max(1000, Math.Min(30000, value)); // –û—Ç 1 –¥–æ 30 —Å–µ–∫—É–Ω–¥
        }

        public int MaxSubtitleLength
        {
            get => _maxSubtitleLength;
            set => _maxSubtitleLength = Math.Max(10, Math.Min(500, value)); // –û—Ç 10 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤
        }

        public SubtitlesService(OBSService obsService)
        {
            _obsService = obsService;
            _subtitleTimer = new Timer();
            _subtitleTimer.Elapsed += OnSubtitleTimerElapsed;
            _subtitleTimer.AutoReset = false;
        }

        public async Task ShowSubtitleAsync(string text, string? username = null)
        {
            if (!IsEnabled) return;

            try
            {
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                var subtitleText = FormatSubtitleText(text, username);
                
                // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                if (subtitleText.Length > MaxSubtitleLength)
                {
                    subtitleText = subtitleText.Substring(0, MaxSubtitleLength - 3) + "...";
                }

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
                _subtitleTimer.Stop();

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ OBS
                if (_obsService.IsEnabled && _obsService.IsConnected)
                {
                    await _obsService.SetTextAsync(SubtitleSourceName, subtitleText);
                    await _obsService.ShowSourceAsync(SubtitleSourceName);
                }

                _currentSubtitle = subtitleText;
                SubtitleChanged?.Invoke(this, subtitleText);

                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è
                _subtitleTimer.Interval = SubtitleDuration;
                _subtitleTimer.Start();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {ex.Message}");
            }
        }

        public async Task ClearSubtitleAsync()
        {
            if (!IsEnabled) return;

            try
            {
                _subtitleTimer.Stop();
                _currentSubtitle = "";

                // –°–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ OBS
                if (_obsService.IsEnabled && _obsService.IsConnected)
                {
                    await _obsService.HideSourceAsync(SubtitleSourceName);
                }

                SubtitleCleared?.Invoke(this, EventArgs.Empty);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {ex.Message}");
            }
        }

        public async Task ShowEmotionalSubtitleAsync(string emotionText, string? username = null)
        {
            if (!IsEnabled) return;

            try
            {
                var subtitleText = FormatEmotionalSubtitleText(emotionText, username);
                
                // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                if (subtitleText.Length > MaxSubtitleLength)
                {
                    subtitleText = subtitleText.Substring(0, MaxSubtitleLength - 3) + "...";
                }

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
                _subtitleTimer.Stop();

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ OBS —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å—Ç–∏–ª–µ–º
                if (_obsService.IsEnabled && _obsService.IsConnected)
                {
                    await _obsService.SetTextAsync(SubtitleSourceName, subtitleText);
                    await _obsService.ShowSourceAsync(SubtitleSourceName);
                }

                _currentSubtitle = subtitleText;
                SubtitleChanged?.Invoke(this, subtitleText);

                // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –¥–æ–ª—å—à–µ
                _subtitleTimer.Interval = SubtitleDuration + 2000; // +2 —Å–µ–∫—É–Ω–¥—ã
                _subtitleTimer.Start();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {ex.Message}");
            }
        }

        public async Task ShowEventSubtitleAsync(string eventText, string? username = null)
        {
            if (!IsEnabled) return;

            try
            {
                var subtitleText = FormatEventSubtitleText(eventText, username);
                
                // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                if (subtitleText.Length > MaxSubtitleLength)
                {
                    subtitleText = subtitleText.Substring(0, MaxSubtitleLength - 3) + "...";
                }

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
                _subtitleTimer.Stop();

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ OBS —Å —Å–æ–±—ã—Ç–∏–π–Ω—ã–º —Å—Ç–∏–ª–µ–º
                if (_obsService.IsEnabled && _obsService.IsConnected)
                {
                    await _obsService.SetTextAsync(SubtitleSourceName, subtitleText);
                    await _obsService.ShowSourceAsync(SubtitleSourceName);
                }

                _currentSubtitle = subtitleText;
                SubtitleChanged?.Invoke(this, subtitleText);

                // –°–æ–±—ã—Ç–∏–π–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –µ—â–µ –¥–æ–ª—å—à–µ
                _subtitleTimer.Interval = SubtitleDuration + 3000; // +3 —Å–µ–∫—É–Ω–¥—ã
                _subtitleTimer.Start();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–±—ã—Ç–∏–π–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {ex.Message}");
            }
        }

        private string FormatSubtitleText(string text, string? username)
        {
            if (string.IsNullOrEmpty(username))
            {
                return text;
            }

            return $"{username}: {text}";
        }

        private string FormatEmotionalSubtitleText(string text, string? username)
        {
            if (string.IsNullOrEmpty(username))
            {
                return $"üòä {text}";
            }

            return $"üòä {username}: {text}";
        }

        private string FormatEventSubtitleText(string text, string? username)
        {
            if (string.IsNullOrEmpty(username))
            {
                return $"üéâ {text}";
            }

            return $"üéâ {username}: {text}";
        }

        private async void OnSubtitleTimerElapsed(object? sender, ElapsedEventArgs e)
        {
            await ClearSubtitleAsync();
        }

        public string GetCurrentSubtitle()
        {
            return _currentSubtitle;
        }

        public void Dispose()
        {
            _subtitleTimer?.Dispose();
        }
    }
} 